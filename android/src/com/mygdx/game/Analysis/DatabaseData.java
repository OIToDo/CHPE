package com.mygdx.game.Analysis;


import com.mygdx.game.persistance.*;
import com.mygdx.game.persistance.Coordinate.NNCoordinate;
import com.mygdx.game.persistance.Session.NNSession;
import com.mygdx.game.persistance.Session.NNSessionDAO;

import com.mygdx.game.DebugLog;


import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * This class implements the Data interface, it retrieves the vector data
 * from a JSON file generated by a neural network based Python application.
 */
public class DatabaseData implements Data {

    /**
     * Constructor that inits member fields thus loading the data from disk.
     * @param appDatabase File path to the JSON file on disk.
     */
    public DatabaseData(AppDatabase appDatabase) {
        this.appDatabase=appDatabase;
        this.nnSessionDAO = this.appDatabase.nnSessionDAO();
        this.currentSession = this.nnSessionDAO.getLastSession();

    }

    /**
     * Implements Data's interface function for getting a single coordinate using Java's JSON library.
     */
    public Vec2 getCoord(int frame, body_part bp) {
        NNCoordinate nnCoordinate = this.nnSessionDAO.get_coordinates(frame,bp.ordinal(),
                this.currentSession.id);

        DebugLog.log(Integer.toString(frame));

        DebugLog.log(Integer.toString(bp.ordinal()));
        DebugLog.log(Long.toString(this.currentSession.id));
        DebugLog.log(String.valueOf(nnCoordinate.x));
        DebugLog.log(String.valueOf(nnCoordinate.y));

        return new Vec2(nnCoordinate.x, nnCoordinate.y);
    }

    /**
     * Implements Data's interface function for retrieving the number of body parts
     * using a hardcoded enum.
     */
    public int getBodyPartCount() {
        return body_part.values().length;
    }

    /**
     * Implements Data's interface function for getting the frame count using the read JSON data.
     */
    public int getFrameCount() {
        return this.currentSession.frame_count;
    }

    /**
     * Implements Data's interface function for getting the number of frames per second used.
     * hardcoded for now.
     */
    public float getFps() {
        return this.currentSession.frames_per_second;
    }


    /**
     * Implements Data's interface for writing the data back to the data structure.
     * Does nothing for now.
     */
    public void serialize() {
        return;
    }


    private AppDatabase appDatabase;
    private NNSessionDAO nnSessionDAO;
    private NNSession currentSession;

}